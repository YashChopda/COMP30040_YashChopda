./esbmc ds-04-impl1.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-04-impl1.c: Parsing
In file included from benchmarks/ds-04-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-04-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-04-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.276s
GOTO program processing time: 0.024s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 3 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 3 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 3 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 3 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 12 iteration 3 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 13 iteration 3 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 14 iteration 3 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 4 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 5 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 18 iteration 3 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 17 iteration 3 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 4 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 5 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Unwinding loop 20 iteration 4 file util.h line 126 function check_stability
Unwinding loop 20 iteration 5 file util.h line 126 function check_stability
Symex completed in: 0.051s (367 assignments)
Slicing time: 0.001s (removed 221 assignments)
Generated 257 VCC(s), 48 remaining after simplification (146 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.089s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.089s
Runtime decision procedure: 0.308s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 256.000000 (01000000 01110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 256 (00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 256.000000 (01000000 01110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 34 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 35 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 39 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 256 (00000000 00000000 00000001 00000000)

State 40 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 43 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -256 (11111111 11111111 11111111 00000000)

State 44 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 47 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 0 (00000000 00000000 00000000 00000000)

State 48 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 53 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 55 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 57 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 59 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-04-impl2.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-04-impl2.c: Parsing
In file included from benchmarks/ds-04-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-04-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-04-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.282s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 3 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 3 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 3 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 3 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 12 iteration 3 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 13 iteration 3 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 14 iteration 3 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 4 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 5 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 18 iteration 3 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 17 iteration 3 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 4 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 5 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Unwinding loop 20 iteration 4 file util.h line 126 function check_stability
Unwinding loop 20 iteration 5 file util.h line 126 function check_stability
Symex completed in: 0.051s (367 assignments)
Slicing time: 0.001s (removed 221 assignments)
Generated 257 VCC(s), 48 remaining after simplification (146 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.091s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.091s
Runtime decision procedure: 0.307s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 64 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 34 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 35 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 39 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 64 (00000000 00000000 00000000 01000000)

State 40 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 43 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -64 (11111111 11111111 11111111 11000000)

State 44 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 47 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 0 (00000000 00000000 00000000 00000000)

State 48 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 53 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 55 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 57 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 59 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-04-impl3.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-04-impl3.c: Parsing
In file included from benchmarks/ds-04-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-04-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-04-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.179s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 3 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 3 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 3 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 3 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 12 iteration 3 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 13 iteration 3 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 14 iteration 3 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 4 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 5 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 18 iteration 3 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 17 iteration 3 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 4 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 5 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Unwinding loop 20 iteration 4 file util.h line 126 function check_stability
Unwinding loop 20 iteration 5 file util.h line 126 function check_stability
Symex completed in: 0.051s (367 assignments)
Slicing time: 0.001s (removed 221 assignments)
Generated 257 VCC(s), 48 remaining after simplification (146 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.090s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.090s
Runtime decision procedure: 0.310s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 32.000000 (01000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 32 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 32.000000 (01000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 34 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 35 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 39 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 32 (00000000 00000000 00000000 00100000)

State 40 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 43 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -32 (11111111 11111111 11111111 11100000)

State 44 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 47 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 0 (00000000 00000000 00000000 00000000)

State 48 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 53 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 55 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 57 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 59 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-05-impl1.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-05-impl1.c: Parsing
In file included from benchmarks/ds-05-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-05-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-05-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.297s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 3 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 3 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 3 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 3 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 12 iteration 3 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 13 iteration 3 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 14 iteration 3 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 4 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 5 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 18 iteration 3 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 17 iteration 3 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 4 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 5 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Unwinding loop 20 iteration 4 file util.h line 126 function check_stability
Unwinding loop 20 iteration 5 file util.h line 126 function check_stability
Symex completed in: 0.052s (367 assignments)
Slicing time: 0.001s (removed 221 assignments)
Generated 257 VCC(s), 48 remaining after simplification (146 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.094s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.094s
Runtime decision procedure: 0.314s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 64 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 34 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 35 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 39 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 64 (00000000 00000000 00000000 01000000)

State 40 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 43 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 0 (00000000 00000000 00000000 00000000)

State 44 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 47 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -64 (11111111 11111111 11111111 11000000)

State 48 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 53 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 55 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 57 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 59 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-05-impl2.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-05-impl2.c: Parsing
In file included from benchmarks/ds-05-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-05-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-05-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.278s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 3 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 3 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 3 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 3 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 12 iteration 3 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 13 iteration 3 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 14 iteration 3 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 4 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 5 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 18 iteration 3 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 17 iteration 3 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 4 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 5 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Unwinding loop 20 iteration 4 file util.h line 126 function check_stability
Unwinding loop 20 iteration 5 file util.h line 126 function check_stability
Symex completed in: 0.050s (367 assignments)
Slicing time: 0.001s (removed 221 assignments)
Generated 257 VCC(s), 48 remaining after simplification (146 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.090s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.090s
Runtime decision procedure: 0.307s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 16.000000 (01000000 00110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 16 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 34 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 35 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 16.000000 (01000000 00110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 39 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 16 (00000000 00000000 00000000 00010000)

State 40 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 43 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 0 (00000000 00000000 00000000 00000000)

State 44 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 47 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -16 (11111111 11111111 11111111 11110000)

State 48 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 53 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 55 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 57 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 59 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-05-impl3.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-05-impl3.c: Parsing
In file included from benchmarks/ds-05-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-05-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-05-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.271s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 3 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 3 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 3 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 3 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 12 iteration 3 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 13 iteration 3 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 14 iteration 3 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 11 iteration 2 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 4 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 15 iteration 3 file util.h line 103 function check_stability
Unwinding loop 16 iteration 5 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 18 iteration 3 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 17 iteration 3 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 4 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 5 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Unwinding loop 20 iteration 4 file util.h line 126 function check_stability
Unwinding loop 20 iteration 5 file util.h line 126 function check_stability
Symex completed in: 0.049s (367 assignments)
Slicing time: 0.000s (removed 221 assignments)
Generated 257 VCC(s), 48 remaining after simplification (146 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.088s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.088s
Runtime decision procedure: 0.306s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 8.000000 (01000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 8 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 34 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 35 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 8.000000 (01000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000)

State 39 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 8 (00000000 00000000 00000000 00001000)

State 40 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 43 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 0 (00000000 00000000 00000000 00000000)

State 44 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 47 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -8 (11111111 11111111 11111111 11111000)

State 48 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 53 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 55 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 57 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 59 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-06-impl1.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-06-impl1.c: Parsing
In file included from benchmarks/ds-06-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-06-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-06-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.382s
GOTO program processing time: 0.024s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.041s (265 assignments)
Slicing time: 0.000s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.071s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.071s
Runtime decision procedure: 0.294s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 4096.000000 (01000000 10110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 4096 (00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 4096.000000 (01000000 10110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 4096 (00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 27 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 4096 (00000000 00000000 00010000 00000000)

State 28 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 31 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 4096 (00000000 00000000 00010000 00000000)

State 32 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 38 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 2.000000 (01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 40 file util.h line 87 function check_stability thread 0
----------------------------------------------------
  sum = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 42 file util.h line 87 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 43 file util.h line 89 function check_stability thread 0
----------------------------------------------------
  sum = -0.000000 (10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the second constraint of Jury criteria failed: (F(-1)*(-1)^n > 0)

State 45 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-06-impl2.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-06-impl2.c: Parsing
In file included from benchmarks/ds-06-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-06-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-06-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.340s
GOTO program processing time: 0.029s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.045s (265 assignments)
Slicing time: 0.001s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.081s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.081s
Runtime decision procedure: 0.335s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 256.000000 (01000000 01110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 256 (00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 256.000000 (01000000 01110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 256 (00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 27 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 256 (00000000 00000000 00000001 00000000)

State 28 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 31 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 256 (00000000 00000000 00000001 00000000)

State 32 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 38 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 2.000000 (01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 40 file util.h line 87 function check_stability thread 0
----------------------------------------------------
  sum = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 42 file util.h line 87 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 43 file util.h line 89 function check_stability thread 0
----------------------------------------------------
  sum = -0.000000 (10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the second constraint of Jury criteria failed: (F(-1)*(-1)^n > 0)

State 45 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-06-impl3.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-06-impl3.c: Parsing
In file included from benchmarks/ds-06-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-06-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-06-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.277s
GOTO program processing time: 0.024s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.040s (265 assignments)
Slicing time: 0.001s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.074s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.074s
Runtime decision procedure: 0.302s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 64 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 64 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 27 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 64 (00000000 00000000 00000000 01000000)

State 28 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 31 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 64 (00000000 00000000 00000000 01000000)

State 32 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 38 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 2.000000 (01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 40 file util.h line 87 function check_stability thread 0
----------------------------------------------------
  sum = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 42 file util.h line 87 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 43 file util.h line 89 function check_stability thread 0
----------------------------------------------------
  sum = -0.000000 (10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the second constraint of Jury criteria failed: (F(-1)*(-1)^n > 0)

State 45 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-07-impl1.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-07-impl1.c: Parsing
In file included from benchmarks/ds-07-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-07-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-07-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.409s
GOTO program processing time: 0.027s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.043s (265 assignments)
Slicing time: 0.000s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.077s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.077s
Runtime decision procedure: 0.320s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 4096.000000 (01000000 10110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 4096 (00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 4096.000000 (01000000 10110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 27 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 4096 (00000000 00000000 00010000 00000000)

State 28 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 31 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -4096 (11111111 11111111 11110000 00000000)

State 32 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 38 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 40 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-07-impl2.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-07-impl2.c: Parsing
In file included from benchmarks/ds-07-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-07-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-07-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.253s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.043s (265 assignments)
Slicing time: 0.000s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.077s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.077s
Runtime decision procedure: 0.322s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 256.000000 (01000000 01110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 256 (00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 256.000000 (01000000 01110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 27 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 256 (00000000 00000000 00000001 00000000)

State 28 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 31 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -256 (11111111 11111111 11111111 00000000)

State 32 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 38 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 40 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-07-impl3.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-07-impl3.c: Parsing
In file included from benchmarks/ds-07-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-07-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-07-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.330s
GOTO program processing time: 0.027s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.045s (265 assignments)
Slicing time: 0.000s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.079s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.079s
Runtime decision procedure: 0.322s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 64 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 27 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 64 (00000000 00000000 00000000 01000000)

State 28 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 31 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -64 (11111111 11111111 11111111 11000000)

State 32 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 38 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 40 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-08-impl1.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-08-impl1.c: Parsing
In file included from benchmarks/ds-08-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-08-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-08-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.285s
GOTO program processing time: 0.024s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.042s (265 assignments)
Slicing time: 0.001s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.073s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.073s
Runtime decision procedure: 0.013s
BMC program time: 0.129s

VERIFICATION SUCCESSFUL
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-08-impl2.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-08-impl2.c: Parsing
In file included from benchmarks/ds-08-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-08-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-08-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.183s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.040s (265 assignments)
Slicing time: 0.000s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.075s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.075s
Runtime decision procedure: 0.016s
BMC program time: 0.132s

VERIFICATION SUCCESSFUL
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-08-impl3.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-08-impl3.c: Parsing
In file included from benchmarks/ds-08-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-08-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-08-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.340s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.040s (265 assignments)
Slicing time: 0.001s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.073s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.073s
Runtime decision procedure: 0.016s
BMC program time: 0.130s

VERIFICATION SUCCESSFUL
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-09-impl1.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-09-impl1.c: Parsing
In file included from benchmarks/ds-09-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-09-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-09-impl1.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.425s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.040s (265 assignments)
Slicing time: 0.001s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.072s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.072s
Runtime decision procedure: 0.297s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 4096.000000 (01000000 10110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 4096 (00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 4096.000000 (01000000 10110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 27 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 4096 (00000000 00000000 00010000 00000000)

State 28 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 31 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -4096 (11111111 11111111 11110000 00000000)

State 32 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 38 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 40 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-09-impl2.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-09-impl2.c: Parsing
In file included from benchmarks/ds-09-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-09-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-09-impl2.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.392s
GOTO program processing time: 0.027s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.043s (265 assignments)
Slicing time: 0.001s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.079s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.079s
Runtime decision procedure: 0.322s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 256.000000 (01000000 01110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 256 (00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 256.000000 (01000000 01110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 27 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 256 (00000000 00000000 00000001 00000000)

State 28 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 31 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -256 (11111111 11111111 11111111 00000000)

State 32 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 38 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 40 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED
yashchopda@yash-Latitude-3490:~/Desktop/ESBMC-6.6.0-Linux/bin$ ./esbmc ds-09-impl3.c --show-cex
ESBMC version 6.6.0 64-bit x86_64 linux
file ds-09-impl3.c: Parsing
In file included from benchmarks/ds-09-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:24:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:29: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
           ~~~~             ^~~~~~
           %.0ld
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:186:37: warning: format specifies type 'double' but the argument has type 'fxp_t' (aka 'long') [-Wformat]
   printf("%.0f == %.0f\n", y[idx], y[idx-window_size]);
                   ~~~~             ^~~~~~~~~~~~~~~~~~
                   %.0ld
In file included from benchmarks/ds-09-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:62:17: warning: incompatible pointer types passing 'double [ds.b_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(x[i], xaux, ds.b_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
In file included from benchmarks/ds-09-impl3.c:1:
In file included from /home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/dsverifier.h:37:
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/engine/verify_timing_msp430.h:64:17: warning: incompatible pointer types passing 'double [ds.a_size]' to parameter of type 'fxp_t *' (aka 'long *') [-Wincompatible-pointer-types]
   shiftL(y[i], yaux, ds.a_size);
                ^~~~
/home/yashchopda/Desktop/dsverifier-v2.0.3-esbmc-v4.0-cbmc-5.6/bmc/core/functions.h:55:31: note: passing argument to parameter 'z' here
fxp_t shiftL(fxp_t zIn, fxp_t z[], int N) {
                              ^
Converting
Generating GOTO Program
GOTO program creation time: 1.175s
GOTO program processing time: 0.025s
Starting Bounded Model Checking
Unwinding loop 386 iteration 1 file dsverifier.h line 422 function call_verification_task
Unwinding loop 386 iteration 2 file dsverifier.h line 422 function call_verification_task
Unwinding loop 387 iteration 1 file dsverifier.h line 448 function call_verification_task
Unwinding loop 387 iteration 2 file dsverifier.h line 448 function call_verification_task
Unwinding loop 4 iteration 1 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 4 iteration 2 file fixed-point.h line 260 function fxp_double_to_fxp_array
Unwinding loop 6 iteration 1 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 6 iteration 2 file fixed-point.h line 304 function fxp_to_double_array
Unwinding loop 12 iteration 1 file util.h line 70 function check_stability
Unwinding loop 12 iteration 2 file util.h line 70 function check_stability
Unwinding loop 13 iteration 1 file util.h line 76 function check_stability
Unwinding loop 13 iteration 2 file util.h line 76 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 14 iteration 1 file util.h line 86 function check_stability
Unwinding loop 14 iteration 2 file util.h line 86 function check_stability
Unwinding loop 11 iteration 1 file util.h line 44 function internal_pow
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 1 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 2 file util.h line 102 function check_stability
Unwinding loop 15 iteration 1 file util.h line 103 function check_stability
Unwinding loop 15 iteration 2 file util.h line 103 function check_stability
Unwinding loop 16 iteration 3 file util.h line 102 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 18 iteration 2 file util.h line 108 function check_stability
Unwinding loop 19 iteration 1 file util.h line 107 function check_stability
Unwinding loop 17 iteration 1 file util.h line 115 function check_stability
Unwinding loop 17 iteration 2 file util.h line 115 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 2 file util.h line 107 function check_stability
Unwinding loop 18 iteration 1 file util.h line 108 function check_stability
Unwinding loop 19 iteration 3 file util.h line 107 function check_stability
Unwinding loop 20 iteration 1 file util.h line 126 function check_stability
Unwinding loop 20 iteration 2 file util.h line 126 function check_stability
Unwinding loop 20 iteration 3 file util.h line 126 function check_stability
Symex completed in: 0.041s (265 assignments)
Slicing time: 0.001s (removed 167 assignments)
Generated 136 VCC(s), 33 remaining after simplification (98 assignments)
No solver specified; defaulting to Boolector
Encoding remaining VCC(s) using bit-vector/floating-point arithmetic
Encoding to solver time: 0.072s
Solving with solver Boolector 3.2.0
Encoding to solver time: 0.072s
Runtime decision procedure: 0.294s
Building error trace

Counterexample:

State 10 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 11 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 64 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000)

State 12 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 22 file fixed-point.h line 224 function fxp_double_to_fxp thread 0
----------------------------------------------------
  ftemp = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 23 file fixed-point.h line 233 function fxp_double_to_fxp thread 0
----------------------------------------------------
  tmp = 0 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)

State 24 file fixed-point.h line 234 function fxp_double_to_fxp thread 0
----------------------------------------------------
  residue = 64.000000 (01000000 01010000 00000000 00000000 00000000 00000000 00000000 00000000)

State 27 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = 64 (00000000 00000000 00000000 01000000)

State 28 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 31 file fixed-point.h line 284 function fxp_to_double thread 0
----------------------------------------------------
  f_int = -64 (11111111 11111111 11111111 11000000)

State 32 file fixed-point.h line 285 function fxp_to_double thread 0
----------------------------------------------------
  f = -1.000000 (10111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 36 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 1.000000 (00111111 11110000 00000000 00000000 00000000 00000000 00000000 00000000)

State 38 file util.h line 77 function check_stability thread 0
----------------------------------------------------
  sum = 0.000000 (00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000)
[DEBUG] the first constraint of Jury criteria failed: (F(1) > 0)

State 40 file verify_stability.h line 37 function verify_stability thread 0
----------------------------------------------------
Violated property:
  file verify_stability.h line 37 function verify_stability
  assertion check_stability(_a, ds.a_size)
  (_Bool)return_value$_check_stability$3

VERIFICATION FAILED

